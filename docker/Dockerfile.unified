# [DEPRECATED] このDockerfile.unifiedは今後非推奨です。docker/Dockerfile.base および分割Dockerfile（bridge, msgs, rl-agent等）を利用してください。
# 新しい構成では共通ベースイメージを使い、各機能ごとに差分のみを管理します。
# PX4 SITL + ROS 2 Humble + Gazebo Fortress + カスタムモデル統合Dockerfile
ARG GITHUB_REPOSITORY_OWNER=your-default-org-or-username

# --- Build Stage ---
FROM ghcr.io/${GITHUB_REPOSITORY_OWNER}/drone-avoidance-base:2.0.1 as builder

ENV DEBIAN_FRONTEND=noninteractive
ARG ROS_DISTRO=humble
ARG IGNITION_VERSION=garden
ENV ROS_DISTRO=${ROS_DISTRO}
ENV IGNITION_VERSION=${IGNITION_VERSION}
SHELL ["/bin/bash", "-lc"]

# --- Fix for expired ROS 2 GPG key (2024) ---
RUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-keys F42ED6FBAB17C654 || true

# --- base packages ---
RUN function robust_apt_install() { \
      for i in {1..5}; do \
        apt-get update --fix-missing && \
        apt-get install -y --no-install-recommends "$@" && break || sleep 10; \
      done; \
    }; \
    robust_apt_install curl wget unzip git cmake ninja-build exiftool \
      python3 python3-pip python3-jinja2 python3-numpy python3-toml python3-dev python3-empy python3-setuptools \
      libtinyxml2-dev libeigen3-dev libyaml-cpp-dev \
      libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
      libopencv-dev protobuf-compiler libprotobuf-dev \
      lsb-release sudo gnupg2 apt-transport-https ca-certificates netcat && \
    rm -rf /var/lib/apt/lists/*

# --- ROS 2 Humble install ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl gnupg2 lsb-release && \
    mkdir -p /usr/share/keyrings && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list && \
    apt-get update && \
    apt-get install -y ros-${ROS_DISTRO}-ros-base python3-colcon-common-extensions python3-rosdep && \
    rm -rf /var/lib/apt/lists/*

# --- PX4 clone & build ---
RUN rm -rf /PX4-Autopilot && \
    git clone --depth 1 --recursive -b main https://github.com/PX4/PX4-Autopilot.git /PX4-Autopilot
# ROS 2 GPG key再登録（PX4依存解決前に必須）
RUN mkdir -p /etc/apt/keyrings && \
    curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' -o /etc/apt/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list
WORKDIR /PX4-Autopilot
ENV PX4_WITH_GZ_TRANSPORT=ON
RUN pip3 install --no-cache-dir --index-url https://pypi.org/simple pyulog pyros-genmsg && rm -rf /root/.cache/pip
RUN SUDO="" NO_SUDO=1 Tools/setup/ubuntu.sh --no-nuttx && \
    make -j$(nproc) px4_sitl_default && \
    ls -l /PX4-Autopilot/build/px4_sitl_default/bin/px4 && \
    cp /PX4-Autopilot/build/px4_sitl_default/bin/px4 /usr/local/bin/px4 && \
    chmod +x /usr/local/bin/px4 && \
    ls -l /usr/local/bin/px4 && \
    mkdir -p /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/build/px4_sitl_rtps
COPY ../../custom_airframes/4001_custom_drone /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/airframes/4001_custom_drone
COPY ../../custom_airframes/4001_custom_drone /PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/4001_custom_drone
RUN mkdir -p /etc/init.d-posix/airframes && cp /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/airframes/4001_custom_drone /etc/init.d-posix/airframes/4001_custom_drone
RUN ls -l /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/airframes/4001_custom_drone || (echo 'ERROR: 4001_custom_drone not found in build/px4_sitl_default/etc/init.d-posix/airframes/' && exit 1)
RUN ls -l /PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/4001_custom_drone || (echo 'ERROR: 4001_custom_drone not found in ROMFS/px4fmu_common/init.d-posix/airframes/' && exit 1)
RUN ls -l /etc/init.d-posix/airframes/4001_custom_drone || (echo 'ERROR: 4001_custom_drone not found in /etc/init.d-posix/airframes/' && exit 1)
RUN if [ ! -f /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS ]; then \
      cp /PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/rcS /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS; \
    fi
RUN sed -i '/px4-alias.sh/d' /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS

# --- PX4カスタムrcSをビルド後に上書きコピー ---
COPY ../../custom_airframes/rcS_custom /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS
RUN chmod +x /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS

# --- ROS 2 workspace setup ---
WORKDIR /sim_ws
COPY ../../src/ src/
COPY ../../rosdep/rosdep-bridge.yaml ../../rosdep/rosdep-msgs.yaml /rosdep/
COPY ../../src/sim_launch/config/sim_params.yaml /sim_ws/config/sim_params.yaml
RUN rm -f /etc/ros/rosdep/sources.list.d/20-default.list && \
    rosdep init && \
    rosdep update --include-eol-distros && \
    rosdep install --from-paths /sim_ws/src --rosdistro ${ROS_DISTRO} -y --ignore-src
RUN id -u builder &>/dev/null || useradd -m builder
RUN mkdir -p /etc/ros/rosdep/sources.list.d && \
    echo "yaml file:///rosdep/rosdep-bridge.yaml trusted: true" > /etc/ros/rosdep/sources.list.d/10-local.yaml && \
    mkdir -p /root/.ros && \
    chown -R builder:builder /etc/ros /root/.ros /rosdep
# rootでrosdep update
RUN rosdep update --include-eol-distros || true
USER builder
# builderユーザでもrosdep update
RUN rosdep update --include-eol-distros || true
USER root
RUN . /opt/ros/${ROS_DISTRO}/setup.sh && \
    rosdep install --from-paths /sim_ws/src --rosdistro ${ROS_DISTRO} -y --ignore-src && \
    colcon build --symlink-install --event-handlers console_direct+
RUN (ls /sim_ws/install/lib/python3.10/site-packages/drone_msgs/msg/_drone_control_command.py \
  || ls /sim_ws/install/drone_msgs/local/lib/python3.10/dist-packages/drone_msgs/msg/_drone_control_command.py) \
  || (echo 'ERROR: drone_msgs Python bindings not found!' && exit 1)

# --- px4_msgsのPythonバインディングが存在するかチェック ---
RUN ls /sim_ws/install/lib/python3.10/site-packages/px4_msgs || echo 'px4_msgs not found'

# --- Gazebo Fortress, netcat, PX4バイナリのPATH ---
RUN apt-get update && apt-get install -y --no-install-recommends netcat wget lsb-release mongodb-org-tools && apt-get clean && \
    ls -l /PX4-Autopilot/build/px4_sitl_default/bin/px4 && \
    if [ ! -f /usr/local/bin/px4 ]; then cp /PX4-Autopilot/build/px4_sitl_default/bin/px4 /usr/local/bin/px4 && chmod +x /usr/local/bin/px4; fi && \
    ln -sf /PX4-Autopilot/build/px4_sitl_default/bin/param /usr/local/bin/param || true && \
    ln -sf /usr/bin/nc /PX4-Autopilot/build/px4_sitl_default/bin/nc || true && \
    ln -sf /usr/bin/bsondump /PX4-Autopilot/build/px4_sitl_default/bin/bsondump || true

# --- カスタムモデル配置 ---
COPY ../../custom_model/drone_model /models/drone_model
RUN mkdir -p /usr/share/gz/fortress/models && \
    ln -s /models/drone_model /usr/share/gz/fortress/models/drone_model

# --- Gazebo Garden install ---
RUN for i in {1..5}; do apt-get update && apt-get install -y lsb-release wget gnupg2 && break || sleep 10; done
RUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" > /etc/apt/sources.list.d/gazebo-stable.list
RUN for i in {1..5}; do apt-get update && apt-get install -y --no-install-recommends gz-${IGNITION_VERSION} libgz-sim8 libgz-sim8-plugins libogre-next-2.3.0 && break || sleep 10; done && \
    rm -rf /var/lib/apt/lists/*
# 必要に応じてros-gz-bridge等も
RUN for i in {1..5}; do apt-get update && apt-get install -y --no-install-recommends ros-${ROS_DISTRO}-ros-gz-bridge ros-${ROS_DISTRO}-ros-gz-sim && break || sleep 10; done && \
    rm -rf /var/lib/apt/lists/*

# --- Gazebo Garden 標準モデルのダウンロードとリンク強化 ---
RUN gz model --download ground_plane || true
RUN gz model --download sun || true
RUN mkdir -p /usr/share/gz/garden/models && \
    [ -d /root/.gz/models/ground_plane ] && ln -sf /root/.gz/models/ground_plane /usr/share/gz/garden/models/ground_plane || true && \
    [ -d /root/.gz/models/sun ] && ln -sf /root/.gz/models/sun /usr/share/gz/garden/models/sun || true
RUN ls -l /usr/share/gz/garden/models/ground_plane || echo 'ground_plane model not found!'
RUN ls -l /usr/share/gz/garden/models/sun || echo 'sun model not found!'

# --- Runtime Stage ---
FROM ghcr.io/${GITHUB_REPOSITORY_OWNER}/drone-avoidance-base:2.0.1

ARG ROS_DISTRO=humble
ARG IGNITION_VERSION=garden
ENV ROS_DISTRO=${ROS_DISTRO}
ENV IGNITION_VERSION=${IGNITION_VERSION}
SHELL ["/bin/bash", "-lc"]

# PX4バイナリと必要なairframe/rcS/ROMFS
COPY --from=builder /usr/local/bin/px4 /usr/local/bin/px4
COPY --from=builder /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/airframes/4001_custom_drone /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/airframes/4001_custom_drone
COPY --from=builder /PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/4001_custom_drone /PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/4001_custom_drone
COPY --from=builder /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS /PX4-Autopilot/build/px4_sitl_default/etc/init.d-posix/rcS

# ROS2ワークスペース成果物
COPY --from=builder /sim_ws/install /sim_ws/install
COPY --from=builder /sim_ws/config /sim_ws/config

# カスタムモデル
COPY --from=builder /models/drone_model /models/drone_model

# Entrypoint
COPY ../../docker/entrypoint-unified.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENV ROS_DOMAIN_ID=0
ENTRYPOINT ["/entrypoint.sh"]

ENV QT_QPA_PLATFORM=offscreen

RUN if [ "$(dpkg --print-architecture)" != "amd64" ]; then \
  echo "[ERROR] This image is officially supported only on amd64. For arm64 or other architectures, additional validation and support are required. Exiting."; \
  exit 1; \
fi

# ビルドステージの最後にビルドツールを削除
RUN apt-get purge -y build-essential cmake ninja-build git && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /root/.cache/* 