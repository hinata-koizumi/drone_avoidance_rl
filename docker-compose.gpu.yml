version: '3.8'

services:
  # GPU対応ベースイメージのビルド
  base-gpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.base-gpu
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: drone-avoidance-base-gpu:2.0.1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # GPU対応メッセージパッケージ
  msgs-gpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.msgs
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: drone-rl-msgs-gpu:latest
    volumes:
      - ./src/drone_msgs:/workspace/src/drone_msgs:ro
      - ./src/px4_msgs:/workspace/src/px4_msgs:ro
      - ./install:/workspace/install
    environment:
      - COLCON_OPTIONS=--packages-select drone_msgs px4_msgs --parallel-workers 4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # GPU対応ブリッジノード
  bridge-gpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.bridge
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: drone-rl-bridge-gpu:latest
    volumes:
      - ./src:/workspace/src:ro
      - ./install:/workspace/install
      - ./config:/workspace/config:ro
    environment:
      - COLCON_OPTIONS=--packages-select common command_bridge state_bridge --parallel-workers 4
    depends_on:
      - msgs-gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # GPU対応シミュレーター
  sim-gpu:
    build:
      context: .
      dockerfile: docker/px4-simulator/Dockerfile.px4_sitl
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: drone-rl-sim-gpu:latest
    environment:
      - HEADLESS=1
      - ROS_DOMAIN_ID=0
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./src:/workspace/src:ro
      - ./config:/workspace/config:ro
      - ./assets:/workspace/assets:ro
    depends_on:
      - bridge-gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      bash -c "
        source /opt/ros/humble/setup.sh &&
        source /sim_ws/install/setup.sh &&
        ros2 launch sim_launch sim_all.launch.py headless:=true"

  # GPU対応RLエージェント
  rl-agent-gpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.rl-agent-gpu
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: drone-rl-agent-gpu:latest
    environment:
      - ROS_DOMAIN_ID=0
      - CUDA_VISIBLE_DEVICES=0
      - RAY_DISABLE_IMPORT_WARNING=1
      # NCCL最適化設定
      - NCCL_P2P_LEVEL=PIX
      - NCCL_IB_DISABLE=0
      - NCCL_SOCKET_IFNAME=eth0
      - NCCL_DEBUG=INFO
      - NCCL_BLOCKING_WAIT=1
      - NCCL_TIMEOUT=30
    volumes:
      - ./src:/workspace/src:ro
      - ./config:/workspace/config:ro
      - ./tests:/workspace/tests:ro
      - ./logs:/workspace/logs
      - ./checkpoints:/workspace/checkpoints
    ports:
      - "6379:6379"  # Ray Redis
      - "8265:8265"  # Ray Dashboard
      - "10001:10001"  # Ray Client
    depends_on:
      - sim-gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      bash -c "
        source /opt/ros/humble/setup.sh &&
        source /workspace/install/setup.sh &&
        python3 src/vector_env_example.py"

  # GPU監視サービス
  gpu-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.rl-agent-gpu
    image: drone-gpu-monitor:latest
    environment:
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./tools:/workspace/tools:ro
      - ./logs:/workspace/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      bash -c "
        python3 tools/gpu_monitor.py --interval 5 --duration 3600"

  # TensorBoard監視
  tensorboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.rl-agent-gpu
    image: drone-tensorboard:latest
    ports:
      - "6006:6006"
    volumes:
      - ./logs:/workspace/logs
      - ./checkpoints:/workspace/checkpoints
    command: >
      bash -c "
        tensorboard --logdir=/workspace/logs --host=0.0.0.0 --port=6006"

  # Ray Dashboard
  ray-dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.rl-agent-gpu
    image: drone-ray-dashboard:latest
    ports:
      - "8265:8265"
    volumes:
      - ./logs:/workspace/logs
    command: >
      bash -c "
        ray start --head --port=6379 --dashboard-port=8265 --dashboard-host=0.0.0.0"

networks:
  default:
    name: drone_avoidance_gpu_network
    driver: bridge 