name: Reinforcement Learning CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'models/**'
      - 'docker/**'
      - 'config/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/rl-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'models/**'
      - 'docker/**'
      - 'config/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/rl-ci.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          python3-pip \
          python3-dev \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
          
    - name: Install Docker
      run: |
        # Docker公式のインストールスクリプトを使用
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        # Docker Composeをインストール
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Setup ROS 2 environment
      run: |
        # Install ROS 2 Humble
        sudo apt update
        sudo apt install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt update && sudo apt install curl -y
        sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
        sudo apt update
        sudo apt install -y ros-humble-desktop python3-colcon-common-extensions
        
        # Install missing Python dependencies
        sudo apt install -y python3-empy python3-catkin-pkg-modules python3-rospkg-modules python3-lxml python3-yaml
        
        # Install ROS 2 development tools
        sudo apt install -y ros-humble-rosidl-default-generators ros-humble-rosidl-default-runtime
        
        # Try to install em module directly
        sudo apt install -y python3-em || echo "python3-em package not available"
        
        # Install em module directly to ROS 2 environment
        sudo pip3 install empy || echo "pip install empy failed"
        
        # Create em module in ROS 2 Python path
        ROS2_PYTHON_PATH="/opt/ros/humble/lib/python3/dist-packages"
        sudo mkdir -p "$ROS2_PYTHON_PATH/em"
        
        # Try multiple approaches to create em module
        if python3 -c "import empy" 2>/dev/null; then
          EMPY_PATH=$(python3 -c "import empy; print(empy.__file__)")
          sudo ln -sf "$EMPY_PATH" "$ROS2_PYTHON_PATH/em/__init__.py"
          echo "Created em module from empy at: $EMPY_PATH"
        elif [ -f "/usr/lib/python3/dist-packages/empy.py" ]; then
          sudo ln -sf "/usr/lib/python3/dist-packages/empy.py" "$ROS2_PYTHON_PATH/em/__init__.py"
          echo "Created em module from system empy.py"
        else
          # Create a simple em module
          echo 'import empy; globals().update(empy.__dict__)' | sudo tee "$ROS2_PYTHON_PATH/em/__init__.py"
          echo "Created simple em module compatibility layer"
        fi
        
        # Verify em module is available
        python3 -c "import em; print('em module available')" || echo "em module still not available"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build ROS 2 packages
      run: |
        # Clean previous build artifacts
        rm -rf build/ install/ log/
        
        # Check available packages
        echo "Available packages in src/:"
        ls -la src/
        
        # Source ROS 2 environment and set Python path
        source /opt/ros/humble/setup.bash
        export PYTHONPATH=/opt/ros/humble/lib/python3/dist-packages:$PYTHONPATH
        
        # Verify em module is available in ROS 2 environment
        python3 -c "import em; print('em module available in ROS 2 environment')" || {
          echo "em module not available, creating it now"
          ROS2_PYTHON_PATH="/opt/ros/humble/lib/python3/dist-packages"
          sudo mkdir -p "$ROS2_PYTHON_PATH/em"
          echo 'import empy; globals().update(empy.__dict__)' | sudo tee "$ROS2_PYTHON_PATH/em/__init__.py"
        }
        
        # Build packages with explicit workspace
        colcon build --packages-select drone_msgs px4_msgs common --build-base build --install-base install
        
    - name: Run linting
      run: |
        source /opt/ros/humble/setup.bash
        source install/setup.bash
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        mypy src/ --config-file=mypy.ini
        
    - name: Run unit tests
      run: |
        source /opt/ros/humble/setup.bash
        source install/setup.bash
        python -m pytest tests/ -v
        
    - name: Build Docker images
      run: |
        docker build -f docker/Dockerfile.base -t drone-rl-base .
        docker build -f docker/Dockerfile.msgs -t drone-rl-msgs .
        docker build -f docker/Dockerfile.bridge -t drone-rl-bridge .
        
    - name: Run integration tests
      run: |
        docker-compose -f tests/ci-compose.yml up -d
        sleep 30
        docker-compose -f tests/ci-compose.yml logs
        docker-compose -f tests/ci-compose.yml down
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rl-test-results
        path: |
          test-results/
          coverage.xml
          
  security-scan:
    runs-on: ubuntu-22.04
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: drone-rl-base
        args: --severity-threshold=high 