name: Orchestrated CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_integration:
        description: 'Run integration tests'
        required: false
        default: false
        type: boolean

jobs:
  # 各リポジトリの独立テスト
  test-drone-msgs:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Setup ROS 2 Humble
      run: |
        # Ubuntu 22.04用のROS 2 Humbleインストール
        sudo apt update
        sudo apt install -y software-properties-common curl gnupg lsb-release
        sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
        sudo apt update
        sudo apt install -y ros-humble-ros-base python3-colcon-common-extensions
    - name: Test drone-msgs
      run: |
        cd drone-msgs
        source /opt/ros/humble/setup.bash
        colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
        echo "drone-msgs build successful"

  test-drone-sim-core:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Test drone-sim-core
      run: |
        cd drone-sim-core
        docker compose config
        echo "drone-sim-core configuration valid"

  test-drone-rl:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Debug directory structure
      run: |
        pwd
        ls -la
        echo "=== drone-rl contents ==="
        ls -la drone-rl/ || echo "drone-rl directory not found"
    - name: Install dependencies
      run: |
        cd drone-rl
        pwd
        ls -la
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test drone-rl
      run: |
        cd drone-rl
        # Debug: Check if files exist
        echo "=== Checking files ==="
        ls -la
        echo "=== Checking imports ==="
        python -c "import sys; print('Python path:', sys.path)"
        python -c "import gym_env; print('gym_env imported successfully')"
        python -c "import drone_sim_env; print('drone_sim_env imported successfully')"
        # Register environment
        echo "=== Registering environment ==="
        python -c "from gym_env import register_drone_env; register_drone_env(); print('Environment registered')"
        # Debug: Check registry
        echo "=== Checking registry ==="
        python -c "import gymnasium as gym; print('Available envs:', list(gym.registry.keys())[:10])"
        python -c "import gymnasium as gym; print('DroneSimEnv-v0 in registry:', 'DroneSimEnv-v0' in gym.registry)"
        python -c "import gymnasium as gym; print('Registry keys containing DroneSimEnv:', [k for k in gym.registry.keys() if 'DroneSimEnv' in k])"
        # Test environment creation
        echo "=== Testing environment creation ==="
        python -c "import gymnasium as gym; env=gym.make('DroneSimEnv-v0'); print('Environment test OK')" || echo "Registry test failed, trying direct creation"
        # Fallback: Test direct environment creation
        echo "=== Testing direct environment creation ==="
        python -c "from drone_sim_env import DroneSimEnv; env=DroneSimEnv(); print('Direct environment test OK')"
        # Run pytest
        echo "=== Running pytest ==="
        python -m pytest tests/test_gym_api.py -v
    - name: Build Docker image
      run: |
        cd drone-rl
        docker build -f docker/rl-agent-cpu/Dockerfile -t drone-rl:cpu .
        docker run --rm drone-rl:cpu

  # 統合テスト（条件付き実行）
  integration-test:
    runs-on: ubuntu-22.04
    needs: [test-drone-msgs, test-drone-sim-core, test-drone-rl]
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.run_integration == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Run Integration Tests
      run: |
        cd integration-tests
        docker compose build
        docker compose up --abort-on-container-exit 