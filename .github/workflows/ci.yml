name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  setup-buildx:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU (for cross-arch)
        uses: docker/setup-qemu-action@v3

  build-base:
    needs: setup-buildx
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build drone-avoidance-base image
        run: docker buildx build --platform linux/amd64,linux/arm64 -t drone-avoidance-base:latest -f docker/Dockerfile.base --push .

  build-msgs:
    needs: build-base
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-msgs-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-msgs-${{ matrix.arch }}-
      - name: Build msgs_ws (multi-arch)
        run: docker buildx build --platform linux/${{ matrix.arch }} --target msgs_ws -f docker/Dockerfile.msgs --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max --load .

  build-bridge:
    needs: build-msgs
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-bridge-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-bridge-${{ matrix.arch }}-
      - name: Build bridge_ws (multi-arch)
        run: docker buildx build --platform linux/${{ matrix.arch }} --target bridge_ws -f docker/Dockerfile.bridge --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max --load .
      - name: Test bridge_ws
        run: docker run --rm $(docker buildx build --platform linux/${{ matrix.arch }} --target bridge_ws -f docker/Dockerfile.bridge --load -q .) colcon test --base-paths src --packages-ignore gmock gtest

  build-sim:
    needs: build-bridge
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-sim-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-sim-${{ matrix.arch }}-
      - name: Build sim_ws (multi-arch)
        run: docker buildx build --platform linux/${{ matrix.arch }} -t drone_rl:unified --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max --load -f docker/Dockerfile.unified .
      - name: Test sim_ws
        run: docker run --rm drone_rl:unified ros2 launch sim_launch sim_all.launch.py

  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Run pre-commit
        run: pre-commit run --all-files || true

  e2e:
    needs: build-sim
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build all docker images (multi-arch)
        run: |
          docker buildx build --platform linux/${{ matrix.arch }} -t drone_rl:msgs -f docker/Dockerfile.msgs --load .
          docker buildx build --platform linux/${{ matrix.arch }} -t drone_rl:unified -f docker/Dockerfile.unified --load .
          docker buildx build --platform linux/${{ matrix.arch }} -t drone_rl:rl-agent -f docker/rl-agent/Dockerfile.agent --load .
          docker buildx build --platform linux/${{ matrix.arch }} -t drone_rl:bridge -f docker/Dockerfile.bridge --load .
      - name: Launch all services and run E2E tests
        run: |
          docker compose -f tests/ci-compose.yml up --build --abort-on-container-exit
      - name: Run E2E pytest (integration, RL longrun)
        run: |
          python3 -m pip install pytest gymnasium numpy pyyaml lark
          pytest tests/
          pytest tests/test_rl_longrun.py
      - name: Show logs on failure
        if: failure()
        run: docker compose -f tests/ci-compose.yml logs
      - name: Print rerun command on failure
        if: failure()
        run: |
          echo "To reproduce locally:"
          echo "docker compose -f tests/ci-compose.yml up --abort-on-container-exit"

  check-package-versions:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Check package.xml version consistency
        run: ./check_package_versions.sh

  rosdep-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up ROS 2 Humble
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
      - name: Install rosdep
        run: sudo apt-get update && sudo apt-get install -y python3-rosdep
      - name: Initialize rosdep
        run: |
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
      - name: Add local rosdep sources
        run: |
          mkdir -p ~/.ros/rosdep/sources.list.d
          cp -r rosdep/* ~/.ros/rosdep/
      - name: Run rosdep install
        run: |
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble

  check-tag-version:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Extract tag version
        id: tag
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Extract package.xml version
        id: pkg
        run: |
          PKG_VERSION=$(grep -h '<version>' src/*/package.xml | head -1 | sed -E 's/.*<version>(.*)<\\/version>.*/\\1/')
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
      - name: Compare tag and package.xml version
        run: |
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) and package.xml version ($PKG_VERSION) do not match!"
            exit 1
          fi

  gym-api-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Set up ROS 2 Humble
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest gymnasium numpy pyyaml lark
      - name: Install ROS 2 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-colcon-common-extensions python3-empy
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble
      - name: Build ROS 2 workspace
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          export PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH
          colcon build --merge-install --base-paths src
      - name: Run Gym API tests
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          source install/setup.sh
          export PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH:$(pwd):$(pwd)/src
          pytest tests/test_gym_api.py
        shell: bash

  validate-model:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Ignition Tools
        run: sudo apt-get update && sudo apt-get install -y ignition-tools
      - name: Symlink ign to gz if needed
        run: |
          if ! command -v ign >/dev/null 2>&1 && command -v gz >/dev/null 2>&1; then
            sudo ln -s $(command -v gz) /usr/local/bin/ign;
            echo '[INFO] Created symlink: ign -> gz';
          fi
      - name: Validate SDF
        run: ign sdf -k custom_model/drone_model/model.sdf
      - name: Validate XML
        run: sudo apt-get install -y libxml2-utils && xmllint --noout custom_model/drone_model/model.config

  static-analysis:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy types-PyYAML
      - name: Run ruff
        run: ruff check src tests
      - name: Run mypy
        run: export PYTHONPATH=install/lib/python3.10/site-packages:$PYTHONPATH && mypy src tests --exclude 'setup.py'
      - name: Set up ROS 2 Humble
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
      - name: Install ROS 2 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-colcon-common-extensions python3-empy
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble
      - name: Run ament_lint_auto
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          colcon test --packages-select ament_lint_auto

  coverage:
    runs-on: ubuntu-22.04
    needs: build-sim
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
      - name: Run coverage
        run: |
          cd src && pytest --cov=../src --cov-report=xml:../coverage.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  security-scan:
    runs-on: ubuntu-22.04
    needs: build-sim
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Scan Docker image
        run: trivy image --exit-code 0 --severity HIGH,CRITICAL drone_rl:unified

  release-notes:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Generate GitHub Release Notes
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true

  rosdep-consistency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install pyyaml
        run: python3 -m pip install pyyaml types-PyYAML
      - name: Check rosdep YAML consistency
        run: python3 tools/check_rosdep_consistency.py

