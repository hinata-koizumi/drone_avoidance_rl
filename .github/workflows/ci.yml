name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  # ディスク容量管理のための環境変数
  DOCKER_BUILDKIT_INLINE_CACHE: 1
  BUILDKIT_STEP_LOG_MAX_SIZE: 10485760
  BUILDKIT_STEP_LOG_MAX_SPEED: 10485760

# GitHub Actionsのリソース設定
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-buildx:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        runner: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure tools scripts are executable
        run: chmod +x tools/*.py tools/*.sh || true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU (for cross-arch)
        uses: docker/setup-qemu-action@v3
      - name: Print working directory
        run: pwd

  build-base:
    needs: setup-buildx
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        runner: [ubuntu-latest]
    outputs:
      digest: ${{ steps.get_digest.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Aggressive disk cleanup before build (extra)
        run: |
          echo "=== Disk usage before aggressive cleanup ==="
          df -h
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker rmi $(docker images -q) || true
          sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          echo "=== Restarting Docker daemon ==="
          sudo systemctl restart docker || true
          echo "=== Disk usage after aggressive cleanup ==="
          df -h
          docker system df || true
      - name: Set BuildKit tempdir and progress
        run: |
          echo "BUILDKIT_TMPDIR=/tmp" >> $GITHUB_ENV
          echo "BUILDKIT_PROGRESS=auto" >> $GITHUB_ENV
      - name: Clean up disk space
        run: |
          docker system prune -af || true
          docker volume prune -f || true
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          sudo apt-get clean
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
      - name: Build drone-avoidance-base image
        run: docker buildx build --platform linux/amd64 -t drone-avoidance-base:2.0.1 -f docker/Dockerfile.base --load .
      - name: Save drone-avoidance-base image
        run: docker save drone-avoidance-base:2.0.1 | gzip > drone-avoidance-base.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: drone-avoidance-base
          path: drone-avoidance-base.tar.gz
      - name: Download drone-avoidance-base image
        uses: actions/download-artifact@v4
        with:
          name: drone-avoidance-base
          path: ${{ github.workspace }}
        continue-on-error: false
      - name: Check for base image artifact
        run: |
          if [ ! -f ${{ github.workspace }}/drone-avoidance-base.tar.gz ]; then
            echo "ERROR: drone-avoidance-base.tar.gz artifact not found! build-base job may have failed or been skipped." >&2
            exit 1
          fi
      - name: List files after artifact download
        run: ls -l ${{ github.workspace }}
      - name: Check artifact file size
        run: |
          FILE=${{ github.workspace }}/drone-avoidance-base.tar.gz
          if [ ! -s "$FILE" ]; then
            echo "ERROR: $FILE is empty or does not exist. Artifact may be corrupted or upload failed." >&2
            exit 1
          fi
      - name: Load drone-avoidance-base image
        run: |
          set -e
          FILE=${{ github.workspace }}/drone-avoidance-base.tar.gz
          gunzip -c "$FILE" | docker load | tee docker_load.log
          if ! grep -q "Loaded image: drone-avoidance-base:2.0.1" docker_load.log; then
            echo "ERROR: docker load did not report loading drone-avoidance-base:2.0.1" >&2
            cat docker_load.log
            exit 1
          fi
          if ! docker image inspect drone-avoidance-base:2.0.1 > /dev/null 2>&1; then
            echo "ERROR: drone-avoidance-base:2.0.1 failed to load. See docker_load.log below:" >&2
            cat docker_load.log
            exit 1
          fi
      - name: List Docker images after load
        run: docker images
      - name: Ensure base image is present before build
        run: |
          if ! docker image inspect drone-avoidance-base:2.0.1 > /dev/null 2>&1; then
            echo "ERROR: drone-avoidance-base:2.0.1 is not present. Artifact load may have failed." >&2
            exit 1
          fi
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Tag and push drone-avoidance-base image to GHCR
        run: |
          docker tag drone-avoidance-base:2.0.1 ghcr.io/${{ github.repository_owner }}/drone-avoidance-base:2.0.1
          docker push ghcr.io/${{ github.repository_owner }}/drone-avoidance-base:2.0.1
      - name: Get image digest
        id: get_digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository_owner }}/drone-avoidance-base:2.0.1)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
      - name: Aggressive disk cleanup after build (extra)
        run: |
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker rmi $(docker images -q) || true
          sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          sudo systemctl restart docker || true
          df -h
          docker system df || true

  build-msgs:
    needs: build-base
    runs-on: ubuntu-22.04
    # 大きなディスク容量を持つランナーを指定
    strategy:
      matrix:
        arch: [amd64]
        runner: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Aggressive disk cleanup before build (extra)
        run: |
          echo "=== Disk usage before aggressive cleanup ==="
          df -h
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker rmi $(docker images -q) || true
          sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          echo "=== Restarting Docker daemon ==="
          sudo systemctl restart docker || true
          echo "=== Disk usage after aggressive cleanup ==="
          df -h
          docker system df || true
      - name: Set BuildKit tempdir and progress
        run: |
          echo "BUILDKIT_TMPDIR=/tmp" >> $GITHUB_ENV
          echo "BUILDKIT_PROGRESS=auto" >> $GITHUB_ENV
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-msgs-${{ matrix.arch }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-buildx-msgs-${{ matrix.arch }}-
      - name: Pull drone-avoidance-base image from GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          for i in {1..3}; do
            docker pull ghcr.io/${{ github.repository_owner }}/drone-avoidance-base:2.0.1 && break || sleep 10
          done
      - name: Build msgs_ws (multi-arch)
        run: docker buildx build --platform linux/${{ matrix.arch }} --target msgs_ws -t drone-avoidance-msgs:2.0.1 -f docker/Dockerfile.msgs --build-arg GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }} --load .
      - name: Cleanup after build
        run: |
          docker system prune -f || true
          sudo rm -rf /tmp/* /var/tmp/* || true
      - name: Aggressive disk cleanup after build (extra)
        run: |
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker rmi $(docker images -q) || true
          sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          sudo systemctl restart docker || true
          df -h
          docker system df || true

  build-bridge:
    needs: [build-base, build-msgs]
    runs-on: ubuntu-22.04
    # 大きなディスク容量を持つランナーを指定
    strategy:
      matrix:
        arch: [amd64]
        runner: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Aggressive disk cleanup before build
        run: |
          # Docker関連のクリーンアップ
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          
          # システムキャッシュのクリーンアップ
          sudo rm -rf /tmp/* /var/tmp/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          
          # 不要なファイルの削除
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          
          # ディスク使用量の確認
          df -h
          docker system df || true
      - uses: actions/download-artifact@v4
        with:
          name: drone-avoidance-base
      - name: Load drone-avoidance-base image
        run: gunzip -c drone-avoidance-base.tar.gz | docker load
      - name: Set up Docker Buildx (host driver)
        run: |
          if ! docker buildx inspect default > /dev/null 2>&1; then
            docker buildx create --name default --use --driver docker
          else
            docker buildx use default
          fi
      - name: Build bridge_ws (multi-arch)
        run: docker buildx build --platform linux/amd64 --target builder -t drone-avoidance-bridge:2.0.1 -f docker/Dockerfile.bridge --load .
      - name: Test bridge_ws
        run: docker run --rm $(docker buildx build --platform linux/${{ matrix.arch }} --target builder -f docker/Dockerfile.bridge --load -q .) colcon test --merge-install --base-paths src --packages-ignore gmock gtest
      - name: Cleanup after build
        run: |
          docker system prune -f || true
          sudo rm -rf /tmp/* /var/tmp/* || true
      - name: Aggressive disk cleanup after build (extra)
        run: |
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker rmi $(docker images -q) || true
          sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          sudo systemctl restart docker || true
          df -h
          docker system df || true

  e2e:
    runs-on: ubuntu-22.04
    # 大きなディスク容量を持つランナーを指定
    strategy:
      matrix:
        arch: [amd64]
        runner: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Aggressive disk cleanup before build
        run: |
          # Docker関連のクリーンアップ
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          
          # システムキャッシュのクリーンアップ
          sudo rm -rf /tmp/* /var/tmp/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          
          # 不要なファイルの削除
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          
          # ディスク使用量の確認
          df -h
          docker system df || true
      - name: Pull base image with retry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          for i in {1..3}; do
            docker pull ghcr.io/${{ github.repository_owner }}/drone-avoidance-base:2.0.1 && break || sleep 10
          done
      - name: Build Docker images with individual cleanup
        run: |
          # ビルド設定の最適化
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain
          export DOCKER_BUILDKIT_INLINE_CACHE=1
          export BUILDKIT_STEP_LOG_MAX_SIZE=10485760
          export BUILDKIT_STEP_LOG_MAX_SPEED=10485760
          
          # 並列ビルドを制限
          export DOCKER_BUILDKIT_BUILDKITD_FLAGS="--oci-worker-parallelism=1"
          
          # msgs image
          echo "=== Building msgs image ==="
          docker buildx build --platform linux/${{ matrix.arch }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }} \
            --progress=plain \
            -t drone_rl:msgs -f docker/Dockerfile.msgs --load .
          docker system prune -f || true
          df -h
          
          # bridge image
          echo "=== Building bridge image ==="
          docker buildx build --platform linux/${{ matrix.arch }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }} \
            --progress=plain \
            -t drone_rl:bridge -f docker/Dockerfile.bridge --load .
          docker system prune -f || true
          df -h
          
          # sim image
          echo "=== Building sim image ==="
          docker buildx build --platform linux/${{ matrix.arch }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }} \
            --progress=plain \
            -t drone_rl:sim -f docker/px4-simulator/Dockerfile.px4_sitl --load .
          docker system prune -f || true
          df -h
          
          # rl-agent image
          echo "=== Building rl-agent image ==="
          docker buildx build --platform linux/${{ matrix.arch }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }} \
            --progress=plain \
            -t drone_rl:rl-agent -f docker/rl-agent/Dockerfile --load .
          docker system prune -f || true
          df -h
      - name: Final disk cleanup before tests
        run: |
          echo "=== Final disk cleanup ==="
          docker system prune -f || true
          sudo rm -rf /tmp/* /var/tmp/* || true
          
          # より詳細なクリーンアップ
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          sudo rm -rf /var/lib/docker/tmp/* || true
          sudo rm -rf /var/lib/docker/overlay2/* || true
          sudo rm -rf /var/lib/docker/containers/* || true
          sudo rm -rf /var/lib/docker/image/* || true
          
          # ディスク使用量の最終確認
          echo "=== Final disk usage ==="
          df -h
          docker system df || true
          
          # 警告レベルの確認
          AVAILABLE=$(df / | tail -1 | awk '{print $4}')
          echo "Available disk space: ${AVAILABLE}KB"
          if [ "$AVAILABLE" -lt 5242880 ]; then  # 5GB未満の場合
            echo "CRITICAL: Very low disk space available: ${AVAILABLE}KB"
            echo "Attempting emergency cleanup..."
            sudo rm -rf /var/lib/docker/* || true
            sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
            df -h
          fi
      - name: Launch all services and run E2E tests
        run: |
          docker compose -f tests/ci-compose.yml up --build --abort-on-container-exit
      - name: Run E2E pytest (integration, RL longrun)
        run: |
          python3 -m pip install pytest gymnasium numpy pyyaml lark
          pytest tests/
          pytest tests/test_rl_longrun.py
          pytest tests/test_bridge_nodes.py
          pytest tests/test_simulation_launch.py
          pytest tests/test_sample_agents.py
          pytest tests/test_common_utils.py
      - name: Show logs on failure
        if: failure()
        run: docker compose -f tests/ci-compose.yml logs
      - name: Print rerun command on failure
        if: failure()
        run: |
          echo "To reproduce locally:"
          echo "docker compose -f tests/ci-compose.yml up --abort-on-container-exit"
      - name: Aggressive disk cleanup after build (extra)
        run: |
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker rmi $(docker images -q) || true
          sudo rm -rf /tmp/* /var/tmp/* /root/.cache/* || true
          sudo apt-get clean || true
          sudo apt-get autoremove -y || true
          sudo find /var/log -type f -name "*.log" -delete || true
          sudo find /var/cache -type f -delete || true
          sudo journalctl --vacuum-time=1s || true
          sudo journalctl --vacuum-size=1M || true
          sudo systemctl restart docker || true
          df -h
          docker system df || true

  check-package-versions:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Check package.xml version consistency
        run: ./check_package_versions.sh

  rosdep-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Setup ROS 2 GPG key (keyrings workaround)
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' | sudo tee /etc/apt/keyrings/ros-archive-keyring.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2-latest.list
          sudo apt-get update
          sudo apt-get install -y ros-humble-ros-base python3-colcon-common-extensions python3-rosdep
      - name: Install rosdep
        run: sudo apt-get update && sudo apt-get install -y python3-rosdep
      - name: Initialize rosdep
        run: |
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
      - name: Add local rosdep sources
        run: |
          mkdir -p ~/.ros/rosdep/sources.list.d
          cp -r rosdep/* ~/.ros/rosdep/
      - name: Run rosdep install
        run: |
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble

  check-tag-version:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Extract tag version
        id: tag
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Extract package.xml version
        id: pkg
        run: |
          PKG_VERSION=$(grep -h '<version>' src/*/package.xml | head -1 | sed -E 's/.*<version>(.*)<\\/version>.*/\\1/')
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
      - name: Compare tag and package.xml version
        run: |
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) and package.xml version ($PKG_VERSION) do not match!"
            exit 1
          fi

  gym-api-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.13'
      - name: Setup ROS 2 GPG key (keyrings workaround)
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' | sudo tee /etc/apt/keyrings/ros-archive-keyring.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2-latest.list
          sudo apt-get update
          sudo apt-get install -y ros-humble-ros-base python3-colcon-common-extensions python3-rosdep
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest gymnasium numpy pyyaml lark
      - name: Install ROS 2 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-colcon-common-extensions python3-empy
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble
      - name: Remove build, install, and log directories if exist
        run: rm -rf build install log
      - name: Build ROS 2 workspace
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          export PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH
          colcon build --merge-install --base-paths src
      - name: Run Gym API tests
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          source install/setup.sh
          export PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH:$(pwd):$(pwd)/src
          pytest tests/test_gym_api.py
        shell: bash

  validate-model:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Debug PATH and ign/gz
        run: |
          echo "PATH=$PATH"
          which ign || echo 'ign not found'
          which gz || echo 'gz not found'
          ls -l /usr/local/bin/ign || echo '/usr/local/bin/ign not found'
          ls -l /usr/bin/gz || echo '/usr/bin/gz not found'
      - name: Install Gazebo Garden
        run: |
          sudo apt-get update
          sudo apt-get install -y lsb-release wget gnupg
          sudo sh -c 'echo "deb [arch=amd64] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" > /etc/apt/sources.list.d/gazebo-stable.list'
          wget https://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y gz-garden
      - name: Validate SDF
        run: gz sdf -k custom_model/drone_model/model.sdf
      - name: Validate XML
        run: sudo apt-get install -y libxml2-utils && xmllint --noout custom_model/drone_model/model.config

  static-analysis:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Setup ROS 2 GPG key (keyrings workaround)
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' | sudo tee /etc/apt/keyrings/ros-archive-keyring.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2-latest.list
          sudo apt-get update
          sudo apt-get install -y ros-humble-ros-base python3-colcon-common-extensions python3-rosdep
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff mypy types-PyYAML
      - name: Run ruff
        run: ruff check src tests
      - name: Run mypy
        run: export PYTHONPATH=install/lib/python3.13/site-packages:$PYTHONPATH && python -m mypy src tests --exclude 'setup.py'
      - name: Set up ROS 2 Humble
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
      - name: Install ROS 2 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-colcon-common-extensions python3-empy
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble
      - name: Run ament_lint_auto
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          colcon test --packages-select ament_lint_auto

  coverage:
    needs: e2e
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
      - name: Run coverage
        run: |
          cd src && pytest --cov=../src --cov-report=xml:../coverage.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  security-scan:
    needs: e2e
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Scan Docker image
        run: trivy image --exit-code 0 --severity HIGH,CRITICAL drone_rl:unified

  release-notes:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Load .env
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
      - name: Generate GitHub Release Notes
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true

  rosdep-consistency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Install pyyaml
        run: ${{ steps.setup_python.outputs.python-path }} -m pip install --force-reinstall pyyaml types-PyYAML
      - name: Check PyYAML import
        run: ${{ steps.setup_python.outputs.python-path }} -c "import yaml; print(yaml.__file__)"
      - name: Check rosdep YAML consistency
        run: ${{ steps.setup_python.outputs.python-path }} tools/check_rosdep_consistency.py

  px4-sitl-test:
    needs: build-base
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Pull base image by digest
        run: docker pull ${{ needs.build-base.outputs.digest }}
      - name: Build PX4 SITL image
        run: docker build --no-cache -t px4-sitl:ci --build-arg BASE_IMAGE=${{ needs.build-base.outputs.digest }} -f docker/px4-simulator/Dockerfile.px4_sitl docker/px4-simulator
      - name: Run PX4 SITL (smoke test)
        run: |
          docker run -d --name px4-sitl-test px4-sitl:ci
          sleep 10
          docker logs px4-sitl-test || true
          docker stop px4-sitl-test || true
          docker rm px4-sitl-test || true

  gym-env-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.13'
      - name: Setup ROS 2 GPG key (keyrings workaround)
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' | sudo tee /etc/apt/keyrings/ros-archive-keyring.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2-latest.list
          sudo apt-get update
          sudo apt-get install -y ros-humble-ros-base python3-colcon-common-extensions python3-rosdep
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest gymnasium numpy pyyaml lark
      - name: Install ROS 2 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-colcon-common-extensions python3-empy
          sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list
          sudo rosdep init || true
          for i in {1..5}; do rosdep update && break || sleep 5; done || true
          rosdep install --from-paths src --ignore-src -r -y --rosdistro=humble
      - name: Remove build, install, and log directories if exist
        run: rm -rf build install log
      - name: Build ROS 2 workspace
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          export PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH
          colcon build --merge-install --base-paths src
      - name: Run Gym Env API tests
        run: |
          source /opt/ros/${{ env.ROS_DISTRO || 'humble' }}/setup.sh
          source install/setup.sh
          export PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH:$(pwd):$(pwd)/src
          pytest tests/test_gym_env.py
        shell: bash

